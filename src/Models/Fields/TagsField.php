<?php

namespace Babble\Models\Fields;

use ArrayIterator;
use Babble\Models\Record;
use Cocur\Slugify\Slugify;
use Traversable;

class TagsField extends Field
{
    public function validate(Record $record, $value)
    {
        return true; // TODO: Add proper validation.
    }

    public function getView($data)
    {
        return new TagsView($this, $data); // TODO: Change the autogenerated stub
    }

    public function contains($data, $value)
    {
        $slugifier = new Slugify();
        $tagSlug = $slugifier->slugify($value);

        foreach ($data as $tag) {
            if ($tagSlug === $slugifier->slugify($tag)) return true;
        }

        return false;
    }

    function jsonSchema(): array
    {
        return [
            'type' => 'array',
            'items' => [
                'type' => 'string'
            ]
        ];
    }
}

class TagsView implements \IteratorAggregate
{
    private $field;
    private $tags;

    public function __construct(TagsField $field, array $tags)
    {
        $this->tags = $tags;
        $this->field = $field;
    }

    public function contains(string $tag): bool
    {
        return $this->field->contains($this->tags, $tag);
    }

    /**
     * Retrieve an external iterator
     * @link http://php.net/manual/en/iteratoraggregate.getiterator.php
     * @return Traversable An instance of an object implementing <b>Iterator</b> or
     * <b>Traversable</b>
     * @since 5.0.0
     */
    public function getIterator()
    {
        return new ArrayIterator($this->tags);
    }


}